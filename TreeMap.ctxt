#BlueJ class context
comment0.target=TreeMap
comment0.text=\r\n\ TreeMap\ is\ a\ Binary\ Tree\ of\ object\ type\ K.\r\n\r\n\ @author\ Roman\ Gofman\r\n\ @version\ 6/2/2020\r\n
comment1.params=
comment1.target=TreeMap()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ TreeMap\r\n
comment10.params=root\ positionData\ index
comment10.target=void\ addDuplicates(TreeMap.TreeNode,\ int[],\ Index)
comment10.text=\r\n\ Method\ addDuplicates\ adds\ duplicates\ to\ array.\r\n\r\n\ @param\ root;\ to\ get\ duplicates\ from\r\n\ @param\ positionData;\ array\ of\ indexes\r\n
comment11.params=root\ positionData
comment11.target=void\ addDuplicates(TreeMap.TreeNode,\ java.util.ArrayList)
comment11.text=\r\n\ Method\ addDuplicates\ adds\ duplicates\ to\ array.\r\n\r\n\ @param\ root;\ to\ get\ duplicates\ from\r\n\ @param\ positionData;\ ArrayList\ of\ indexes\r\n
comment12.params=idx
comment12.target=java.lang.Comparable\ getAtIndex(int)
comment12.text=\r\n\ Method\ getAtIndex\ finds\ node\ data\ from\ index\r\n\r\n\ @param\ idx;\ index\ at\ which\ node\ is\ found\r\n\ @return\ key\ of\ index\r\n
comment13.params=root\ idx
comment13.target=TreeMap.TreeNode\ getAtIndex(TreeMap.TreeNode,\ int)
comment13.text=\r\n\ Method\ getAtIndex\ finds\ node\ from\ index\r\n\r\n\ @param\ root;\ used\ to\ raverse\ the\ list\ recursively\r\n\ @param\ idx;\ index\ at\ which\ the\ node\ is\ to\ be\ found\r\n\ @return\ TreeNode\ at\ the\ given\ index\r\n
comment14.params=
comment14.target=int\ getSize()
comment14.text=\r\n\ Method\ getSize\ returns\ the\ size\ of\ the\ TreeMap.\r\n\r\n\ @return\ size\ of\ TreeMap\r\n
comment15.params=
comment15.target=TreeMap\ rebalance()
comment15.text=\r\n\ Method\ rebalance\ rebalances\ a\ binary\ tree\r\n\r\n\ @return\ a\ rebalanced\ TreeMap\r\n
comment16.params=nodeArray\ root
comment16.target=java.util.ArrayList\ fillArrayList(java.util.ArrayList,\ TreeMap.TreeNode)
comment16.text=\r\n\ Method\ fillArrayList\ traverses\ the\ Treemap\ inOrder.\r\n\r\n\ @param\ nodeArray;\ arrayList\ to\ be\ filled\r\n\ @param\ root;\ to\ be\ used\ for\ recursive\ traversal\r\n\ @return\ a\ filled\ ArrayList\r\n
comment17.params=nodeArray
comment17.target=int\ getMiddle(java.util.ArrayList)
comment17.text=\r\n\ Method\ getMiddle\ gets\ the\ middle\ value\ in\ a\ array\ list.\r\n\r\n\ @param\ nodeArray;\ arrayList\ to\ be\ searched\r\n\ @return\ the\ middle\ index.\r\n
comment2.params=key
comment2.target=void\ add(java.lang.Comparable)
comment2.text=\r\n\ Method\ add\ public\ interaction\ starter.\r\n\r\n\ @param\ key;\ data\ of\ tree\ node\r\n
comment3.params=key\ root
comment3.target=TreeMap.TreeNode\ add(java.lang.Comparable,\ TreeMap.TreeNode)
comment3.text=\r\n\ Method\ add\ private\ recursion\r\n\r\n\ @param\ key;\ data\ of\ tree\ node\r\n\ @param\ root;\ next\ node\ to\ be\ considered\ root\r\n\ @return\ newly\ created\ node\r\n
comment4.params=key
comment4.target=boolean\ contains(java.lang.Comparable)
comment4.text=\r\n\ Method\ contains\ public\ interactive\ method.\r\n\r\n\ @param\ key;\ data\ of\ tree\ node.\r\n\ @return\ whether\ the\ tree\ has\ a\ value.\r\n
comment5.params=key\ root
comment5.target=boolean\ contains(java.lang.Comparable,\ TreeMap.TreeNode)
comment5.text=\r\n\ Method\ contains\ private\ recursive\ method.\r\n\r\n\ @param\ key;\ data\ of\ tree\ node\r\n\ @param\ root;\ next\ node\ to\ be\ considered\ root\r\n\ @return\ whether\ the\ tree\ has\ a\ value.\r\n
comment6.params=
comment6.target=int[]\ getPositionData()
comment6.text=\r\n\ Method\ getPositionData\ \ \ public\ method\ returns\ indexes.\r\n\r\n\ @return\ array\ of\ indexes\r\n
comment7.params=root\ positionData\ index
comment7.target=void\ getPositionData(TreeMap.TreeNode,\ int[],\ Index)
comment7.text=\r\n\ Method\ getPositionData\ \ \ private\ recursive\ adapts\ given\ array\ and\ gets\ information.\r\n\r\n\ @param\ root;\ next\ node\ to\ be\ considered\ root\r\n\ @param\ positionData\ array\ of\ indexs\r\n
comment8.params=range1\ range2
comment8.target=int[]\ getPositionData(java.lang.Comparable,\ java.lang.Comparable)
comment8.text=\r\n\ Method\ getPositionData\ public\ method\ returns\ indexes\ between\ range1\ and\ range2.\r\n\r\n\ @param\ range1;\ minimum\ range\r\n\ @param\ range2;\ maximum\ range\r\n\ @return\ array\ of\ indexes\ between\ range1\ and\ range2.\r\n
comment9.params=root\ positionData\ range1\ range2
comment9.target=void\ getPositionData(TreeMap.TreeNode,\ java.util.ArrayList,\ java.lang.Comparable,\ java.lang.Comparable)
comment9.text=\r\n\ Method\ getPositionData\ private\ recursive\ method\ traverses\ TreeMap.\r\n\r\n\ @param\ root;\ next\ node\ to\ be\ considered\ root.\r\n\ @param\ positionData;\ array\ of\ indexes\ between\ range1\ and\ range2.\r\n\ @param\ range1;\ minimum\ range\r\n\ @param\ range2;\ maximum\ range\r\n
numComments=18
